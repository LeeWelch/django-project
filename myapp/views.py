from django.shortcuts import render
from django.http import HttpResponse
from django.views import View
from django.views.generic import TemplateView
from django.http import HttpResponseRedirect
from django.urls import reverse


# Create your views here.
def home(request):
    context = {
        'page_title': 'Home Page',
        'page_heading': 'Home Page',
        'page_content': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque a porta odio. Duis molestie at lectus eu consequat. Phasellus justo nibh, fermentum quis eros nec, fermentum luctus odio. Nullam risus odio, aliquam et libero id, luctus vestibulum eros. Sed id convallis ipsum, quis dictum lacus. In molestie mauris ut ornare vehicula.',
    }
    return render(request, 'bootswatch.html', context)
#HttpResponse("<h1>Hello Django!</h1>")

def about(request):
    context = {
            'page_title': 'About Page',
            'page_heading': 'About Page',
            'page_content': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque a porta odio. Duis molestie at lectus eu consequat. Phasellus justo nibh, fermentum quis eros nec, fermentum luctus odio. Nullam risus odio, aliquam et libero id, luctus vestibulum eros. Sed id convallis ipsum, quis dictum lacus. In molestie mauris ut ornare vehicula.',
    }
    return render(request, 'bootswatch.html', context)
#  return HttpResponse("<h1>About Page!</h1>")

def gallery(request):
    context = {
        'page_title': 'Gallery',
        'page_heading': 'Gallery Page',
        'page_content' : ' Etiam id ex sed nisi scelerisque tempor. Nunc non tempor magna. Suspendisse vestibulum massa id suscipit tincidunt. Sed vitae mi purus',
    }
    return render(request, 'gallery.html', context)

def contact(request):
    context = {
        'page_title': 'Contact',
        'page_heading': 'Contact Page',
        'page_content' : 'Contact Us: lorem@impsum.com',
    }
    return render(request, 'bootswatch.html', context)
    
#Class based view vs function based view
def function_view(request):
  context = {
      'page_title': 'Function-Based View',
      'page_heading': 'Welcome to the Function-Based View',
      'page_content': 'This is the content generated by the function-based view.',
  }
  return render(request, 'bootswatch.html', context)


#class from which all class based views inherit
class BaseView(TemplateView):
    default_title = 'My Website'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.setdefault('title', self.default_title)
        return context

class ClassView(BaseView):
  template_name = 'bootswatch.html'

  def get_context_data(self, **kwargs):
      context = super().get_context_data(**kwargs)
      context.update({
          'title': 'New Class-Based View',
          'page_heading': 'Welcome to the Class-Based View',
          'page_content': 'This is the content generated by the class-based view.',
      })
      return context

class ThemeView(BaseView):
    template_name = 'theme.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # Add additional context data if needed
        return context

    def post(self, request, *args, **kwargs):
        theme = request.POST.get('theme')
        response = HttpResponseRedirect(reverse('theme'))
        response.set_cookie('theme', theme)
        return response

# views.py
from django.http import JsonResponse
from .default_data import load_default_data

def load_default_data_view(request):
    load_default_data()  # Call the load_default_data function
    return JsonResponse({'status': 'success'})

# views.py
from django.views.generic import ListView
from django.urls import reverse_lazy
from .models import Invention

class InventionListView(ListView):
    model = Invention
    template_name = 'invention_list.html'
    context_object_name = 'inventions'

# views.py

from django.views.generic import DetailView

class InventionDetailView(DetailView):
    model = Invention
    template_name = 'invention_view.html'
    context_object_name = 'invention'

